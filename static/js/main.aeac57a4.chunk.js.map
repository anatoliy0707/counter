{"version":3,"sources":["common/container/Container.module.css","common/c1-SuperInputText/SuperInputText.module.css","common/c2-SuperButton/SuperButton.module.css","common/container/Container.tsx","common/c2-SuperButton/SuperButton.tsx","common/c1-SuperInputText/SuperInputText.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Container","children","buttons","className","s","container","topBlock","bottomBlock","map","button","SuperButton","red","restProps","finalClassName","default","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","COUNTER","CONFIG","App","useState","maxCountValue","setMaxCountValue","initCountValue","setInitCountValue","countValue","setCountValue","setError","message","setMessage","mode","setMode","useEffect","initValueAsString","localStorage","getItem","maxValueAsString","Number","disabled","onClick","setItem","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aeac57a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1W20A\",\"topBlock\":\"Container_topBlock__1KFMX\",\"bottomBlock\":\"Container_bottomBlock__qtWnA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__2fWNM\",\"errorInput\":\"SuperInputText_errorInput__8Xfah\",\"error\":\"SuperInputText_error__3K-Xb\",\"blue\":\"SuperInputText_blue__2OXo2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__2Hj9A\",\"red\":\"SuperButton_red__2ZXFw\"};","import React, {FC} from \"react\";\r\nimport s from './Container.module.css'\r\n\r\ntype ContainerPropsType = {\r\n    buttons: Array<JSX.Element>;\r\n};\r\n\r\nexport const Container: FC<ContainerPropsType> = ({ children, buttons }) => {\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.topBlock}>{children}</div>\r\n            <div className={s.bottomBlock}>\r\n                {buttons.map((button) => button)}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nexport const SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nexport const SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'number'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}></span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\n\nimport './App.css';\n\nimport {Container} from \"./common/container/Container\";\nimport SuperButton from \"./common/c2-SuperButton/SuperButton\";\nimport SuperInputText from \"./common/c1-SuperInputText/SuperInputText\";\n\nconst COUNTER = \"counter\"\nconst CONFIG = \"config\"\nconst STEP_VALUE = 1\n\nconst App = () => {\n    const [maxCountValue, setMaxCountValue] = useState(5)\n    const [initCountValue, setInitCountValue] = useState(0)\n    const [countValue, setCountValue] = useState(initCountValue)\n    const [error, setError] = useState<string>('')\n    const [message, setMessage] = useState<string>(\"set values and press 'set'\")\n    const [mode, setMode] = useState(CONFIG)\n\n    // const isValueCorrect = field === 'startValue'\n    // ? isStartValueCorrect(e.target.value)\n    // : isMaxValueCorrect(e.target.value)\n\n    useEffect(() => {\n        const initValueAsString = localStorage.getItem('initValue')\n        const maxValueAsString = localStorage.getItem('maxValue')\n\n        if (initValueAsString && maxValueAsString) {\n            setInitCountValue(Number(initValueAsString))\n            setMaxCountValue(Number(maxValueAsString))\n        }\n    }, [])\n\n    const setValues = () => {\n        localStorage.setItem('initValue', initCountValue.toString())\n        localStorage.setItem('maxValue', maxCountValue.toString())\n        setCountValue(initCountValue)\n        setMode(COUNTER)\n    }\n\n\n    // Refactor!!!\n    const onChangeStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setInitCountValue(Number(e.currentTarget.value))\n        if (Number(e.currentTarget.value) < 0 || Number(e.currentTarget.value) >= maxCountValue) {\n            setError(\"Incorrect value!\")\n        } else {\n            setError('')\n            setInitCountValue(Number(e.currentTarget.value))\n            setMode(CONFIG)\n            setMessage(\"set values and press 'set'\")\n        }\n    }\n    // Refactor!!!\n    const onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setMaxCountValue(Number(e.currentTarget.value))\n        if (Number(e.currentTarget.value) === initCountValue || Number(e.currentTarget.value) < initCountValue) {\n            setError(\"Incorrect value!\")\n        } else {\n            setError('')\n            setMaxCountValue(Number(e.currentTarget.value))\n            setMode(CONFIG)\n            setMessage(\"set values and press 'set'\")\n        }\n    }\n\n    const onClickIncHandler = () => {\n        setCountValue(countValue + STEP_VALUE)\n    }\n\n    const onClickResetHandler = () => {\n        setCountValue(initCountValue)\n    }\n\n// Components!!\n    return (\n        <div className=\"App\">\n            <Container\n                buttons={[<SuperButton disabled={mode === COUNTER || !!error} onClick={setValues}\n                                       key=\"SET\">SET</SuperButton>]}>\n                <span>start value:\n                <SuperInputText error={error} type=\"number\" onChange={onChangeStartValueHandler}\n                                value={initCountValue}/>\n                                </span>\n                <span>max value:\n                <SuperInputText error={error} type=\"number\" onChange={onChangeMaxValueHandler} value={maxCountValue}/>\n                </span>\n            </Container>\n            <Container\n                buttons={[\n                    <SuperButton disabled={mode === CONFIG || countValue === maxCountValue} key=\"INC\"\n                                 onClick={onClickIncHandler}>INC</SuperButton>,\n                    <SuperButton disabled={mode === CONFIG || countValue === initCountValue} key=\"RESET\"\n                                 onClick={onClickResetHandler}>RESET</SuperButton>,\n                ]}\n            >\n                {mode === CONFIG && <span className={error ? \"red\" : \"view\"}>{error || message}</span>}\n                {mode === COUNTER &&\n                <span className={maxCountValue === countValue ? \"red\" : \"view\"}>{countValue}</span>}\n            </Container>\n        </div>\n    )\n}\n\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}